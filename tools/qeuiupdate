#!/usr/bin/env python
#

""" $File: //ASP/tec/gui/qtepics.github.io/trunk/tools/qeuiupdate $
    $Revision: #1 $
    $DateTime: 2022/07/17 21:39:52 $
    Last checked in by: $Author: starritt $
"""

import click
import functools
import os
import os.path
import sys
import xml.etree.ElementTree


# globals
_version = "1.1.1"
_verbose = False


errput = functools.partial(print, file=sys.stderr)


# The widgets, well technically the enum prefixes, that
# may need to be updated.
#
widgets = {
    "QEAbstractDynamicWidget" : True,
    "QEAbstractWidget" : True,
    "QEAnalogIndicator" : True,
    "QEAnalogProgressBar" : True,
    "QEAnalogSlider" : True,
    "QEBitStatus" : True,
    "QECheckBox" : True,
    "QEPushButton" : True,
    "QERadioButton" : True,
    "QEComboBox" : True,
    "QEConfiguredLayout" : True,
    "QEFileBrowser" : True,
    "QEFileImage" : True,
    "QEDynamicFormGrid" : True,
    "QEFormGrid" : True,
    "QEFormStateChange" : True,
    "QEFrame" : True,
    "QEGroupBox" : True,
    "QEScalarHistogram" : True,
    "QEWaveformHistogram" : True,
    "QEImage" : True,
    "QELCDNumber" : True,
    "QELabel" : True,
    "QEGenericEdit" : True,
    "QELineEdit" : True,
    "QELog" : True,
    "QNumericEdit" : True,
    "QEPeriodic" : True,
    "QEPvLoadSaveButton" : True,
    "QERecipe" : True,
    "QEScript" : True,
    "QEShape" : True,
    "QESimpleShape" : True,
    "QESlider" : True,
    "QESpinBox" : True
}

# Currently this is just an existance check.
# It might become a name map
#
enumerations = {
    "User" : True,
    "Scientist" : True,
    "Engineer" : True,
    "Always" : True,
    "WhenInAlarm" : True,
    "WhenInvalid" : True,
    "Never" : True,
    "Default" : True,
    "Floating" : True,
    "Integer" : True,
    "UnsignedInteger" : True,
    "Time" : True,
    "LocalEnumeration" : True,
    "String" : True,
    "NoSeparator" : True,
    "Comma" : True,
    "Underscore" : True,
    "Space" : True,
    "Fixed" : True,
    "Scientific" : True,
    "Automatic" : True,
    "Append" : True,
    "Ascii" : True,
    "Index" : True,
    "Text" : True,
    "Picture" : True,
    "ignore" : True,
    "grayout" : True,
    "disable" : True,
    "NoOutput" : True,
    "Terminal" : True,
    "LogOutput" : True,
    "StdOutput" : True,
    "Open" : True,
    "NewTab" : True,
    "NewWindow" : True,
    "DockTop" : True,
    "DockBottom" : True,
    "DockLeft" : True,
    "DockRight" : True,
    "DockTopTabbed" : True,
    "DockBottomTabbed" : True,
    "DockLeftTabbed" : True,
    "DockRightTabbed" : True,
    "DockFloating" : True,
    "DropToVariable" : True,
    "DropToText" : True,
    "DropToTextAndWrite" : True,
    "Mono" : True,
    "Bayer" : True,
    "BayerGB" : True,
    "BayerBG" : True,
    "BayerGR" : True,
    "BayerRG" : True,
    "rgb1" : True,
    "rgb2" : True,
    "rgb3" : True,
    "yuv444" : True,
    "yuv422" : True,
    "yuv421" : True,
    "NoRotation" : True,
    "Rotate90Right" : True,
    "Rotate90Left" : True,
    "Rotate180" : True,
    "usePvName" : True,
    "useAliasName" : True,
    "useDescription" : True,
    "Left_To_Right" : True,
    "Top_To_Bottom" : True,
    "Right_To_Left" : True,
    "Bottom_To_Top" : True,
    "Top" : True,
    "Bottom" : True,
    "Left" : True,
    "Right" : True,
    "RowMajor" : True,
    "ColMajor" : True
}

# -----------------------------------------------------------------------------
#
def process_node(parent_node):

    for node in parent_node:
        if node.tag == "enum" and parent_node.tag == "property":
            parts = node.text.split("::")
            # Note: we assume if both parts are in their respective distionaries,
            # then a substitution is required. We do not check cominations.
            #
            if len(parts) == 2:
                if parts[0] in widgets and parts[1] in enumerations:
                    new_text = "QE::" +  parts[1]
                    if _verbose:
                        print(f"{node.tag} tag: {node.text} => {new_text}")
                    node.text = new_text
                elif parts[0] in widgets or parts[1] in enumerations:
                    if _verbose:
                        print(f"{node.tag} tag: {node.text} no update")
                    

        else:
            process_node(node)


# -----------------------------------------------------------------------------
#
def process_file(filename, inplace):
    if _verbose:
        print(f"processing file: {filename}")

    tree = xml.etree.ElementTree.parse(filename)
    root_node = tree.getroot()
    process_node(root_node)

    if inplace:
        target = filename
    elif filename.endswith(".ui"):
        target = filename[0:-3] + "_updated.ui"
    else:
        target = filename + "_updated.ui"

    tree.write(target,
               encoding="UTF-8",
               xml_declaration='<?xml version="1.0" encoding="UTF-8"?>')

    # ElementTree write does not output a proper last line
    #
    with open(target, 'a') as f:
        f.write("\n")

    if _verbose:
        if inplace:
            print(f"{filename} complete")
        else:
            print(f"{filename} to {target} complete")


# -----------------------------------------------------------------------------
#
def print_version(ctx, param, value):
    """ Click parser helper function """
    if not value or ctx.resilient_parsing:
        return

    vi = sys.version_info
    print("qeuiupdate version: %s  (python %s.%s.%s)" % (_version, vi.major, vi.minor, vi.micro))
    ctx.exit()


# -----------------------------------------------------------------------------
#
context_settings = dict(help_option_names=['--help', '-h'],
                        terminal_width=96,
                        max_content_width=96)


@click.command(context_settings=context_settings,
               epilog="""

\b\bAdditional information:

In EPICS Qt 4, many of the common enumeration types are now defined in 
one place (QEEnums.h) as opposed to being (re-)defined in each widget.
This update not only simplifies the header files, but allows the object 
hierarchy to be re-organised with no, or minimal, impact on existing 
ui files.

However, for ui files created using EPICS Qt 3, within a ui files, the 
enumeration value is stored as, e.g.:

\b
   QELabel::LocalEnumeration

\b 
and this needs to be modified to be;

\b
   QE::LocalEnumeration

\b\bNotes:

ui files that only ever used the default options will not be affected.

Qt appears to be able to interpret and enumueration with or without 
the prefix, i.e. 'LocalEnumeration'  as well as 'QE:LocalEnumeration'.
I am not sure why it even includes the prefix.
However it should be possible to roll back to EPICS Qt 3 (if needed) by
removeing the 'QE::' part of the enumeration (using simple text based find 
and replace). The actual enumation part has not changed.

\b
 
""")
#
# -------------------------------------------------------------------------
#
@click.option('--verbose', '-v',
              is_flag=True,
              help="""Output is verbose when specified""")
#
# -------------------------------------------------------------------------
#
@click.option('--inplace', '-i',
              is_flag=True,
              help="""
When specified, ui files are updated inplace. When not specified, \
a new file is created named: <name>_updated.ui
Note: the original file will be over-written. \
Ensure it is backed up and/or baselined in a source code repository (such as perforce)""")
#
# -----------------------------------------------------------------------------
#
@click.option('--version', '-V',
              is_flag=True,
              callback=print_version,
              expose_value=False,
              is_eager=True,
              help="Show version and exit.")
#
# -----------------------------------------------------------------------------
# nargs is set to -1, so that an unlimited number of arguments are accepted.
#
@click.argument('filenames', nargs=-1, required=True)
#
# -----------------------------------------------------------------------------
#
def cli(verbose, inplace, filenames):
    """ Update ui files created using EPICS Qt 3.x.x to a form suitable for EPICS Qt 4.x.x
    """
    global _verbose
    _verbose = verbose

    if _verbose:
        print(f"inplace:  {inplace}")
        print(f"filenames: {filenames}")

    for filename in filenames:
        try:
            process_file(filename, inplace)
        except Exception as error:
            errput("%s: %s" % (type(error).__name__, error))


# -----------------------------------------------------------------------------
# Set env variables for click and python 3, does no harm for python 2
# Command line entry point for setup
#
def call_cli():
    os.environ["LANG"] = "en_US.utf8"
    os.environ["LC_ALL"] = "en_US.utf8"
    cli()


if __name__ == "__main__":
    call_cli()

# end
