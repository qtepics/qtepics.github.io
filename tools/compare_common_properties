#!/usr/bin/env python
#
# File: tools/compare_common_properties
# DateTime: Mon May 26 17:20:40 2025
# Last checked in by: starritt
#
# 1.3    - Modified for python 3
# 1.4.1  - Use colordiff
#

__author__ = "Andrew Starritt"
__email__ = "andrew.starritt@synchrotron.org.au"
__copyright__ = "Copyright (c) 2015-2022 Australian Synchrotron"
__version__ = "1.4.1"
__date__ = "2022/APR/25"
__description__ = "Script to extract, compare and report on standard sets of properties"
__status__ = "Production"

import os.path
import subprocess
import sys


# -----------------------------------------------------------------------------
#
def mkdir_p(path):
    """ The equivilent to the Linux shell command mkdir -p
    """
    try:
        os.makedirs(path)
    except FileExistsError:
        pass


# -----------------------------------------------------------------------------
#
def run(command, *args, stdout=True, stderr=True):
    """ Runs a system command as a sub-process
        Returns the sub-process status code.
        0 typically means all okay
        127 means that the command file was not found.
    """

    popen_args = [command]
    for arg in args:
        popen_args.append(arg)

    try:
        cp = subprocess.Popen(popen_args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    except FileNotFoundError:
        output(f"{command}: command not found")
        return 127

    returncode = cp.wait()

    t = cp.stdout.read().decode('utf-8').strip()
    r = cp.stderr.read().decode('utf-8').strip()

    if stdout and len(t) > 0:
        print(t, file=sys.stdout)

    if stderr and len(r) > 0:
        print(r, file=sys.stderr)

    return returncode


# -----------------------------------------------------------------------------
#
def process_file(filename, lookfor):

    if (not os.path.isfile(filename)):
        print(f"{filename}: does not exists or is not a file")
        return False

    try:
        f = open(filename, 'r')
    except IOError:
        print(f"Cannot open file: {filename}")
        return

    try:
        lines = f.read().splitlines()
    except:
        print("Cannot read/splt lines for file: %s" % filename)
        f.close()
        return

    f.close()

    first_line_number = 1
    initial_size = len(lines)

#   print ("processing %s  (%d lines)" % (filename, initial_size))

    if len(lines) == 0:
        print(f"file {filename} is empty")
        return

    begin = "BEGIN-" + lookfor
    end = "END-" + lookfor

    extracted = []
    copy = False
    for line in lines:
        if begin in line:
            copy = True

        if copy:
            extracted.append(line)

        if end in line:
            break

    if len(extracted) == 0:
        return
    
    base_name = os.path.basename (filename)
    result = f"/tmp/ccp_{lookfor}_{base_name}"
    
    with open (result, 'w') as f:
        for line in extracted:
            f.write(line)
            f.write("\n")

    return result


# -----------------------------------------------------------------------------
#
def process_group(group, header_files):
    """
    """
    print(f"Processing group {group}")

    compare_list = []
    original = []

    for header_file in header_files:
        extracted = process_file(header_file, group)
        if extracted is not None:
            compare_list.append(extracted)
            original.append(header_file)

    number = len(compare_list)
    
    if number == 0:
        print ("No matching files found")
        print()
        return
    
    if number == 1:
        print (f"One match file found: {original[0]}")
        print()
        return
    
    count = 0
    for index in range (1, number):
        print (f"%s  %s" % (original[0], original[index]))
        status = run('colordiff', '-b', compare_list[0], compare_list[index])
        if status > 0:
            count += 1
        
    print(f"The are {count} mis matches out of {number} files")
    print()


# -----------------------------------------------------------------------------
#
groups = ('STANDARD-PROPERTIES',
          'STANDARD-V2-PROPERTIES',
          'STRING-FORMATTING-PROPERTIES',
          'SINGLE-VARIABLE-PROPERTIES',
          'SINGLE-VARIABLE-V2-PROPERTIES',
          'SINGLE-VARIABLE-V3-PROPERTIES',
          'GENERIC-BUTTON-PROPERTIES'
)


# -----------------------------------------------------------------------------
#
def main():
    args = sys.argv

    # Save and remove exectuable name
    #
    iam = os.path.basename(args.pop(0))

    if len(args) >= 1 and args[0] in ("-h", "--help"):
        print(f"""\
{iam} extracts, compares and reports on the consistancy
or otherwise of the standard sets of properties.

Parameters:
  one or more QE widget header files.

Options:
  -V, --version    Show version and exit.
  -h, --help       Show this message and exit.
  
Additional information
  {iam} uses colordiff to perform the actual difference.
  You must either install colordiff or fake it, e.g. run command:

      ln -s /usr/bin/diff  ~/bin/colordiff
""")
        return

    if len(args) >= 1 and args[0] in ("-V", "--version"):
        vi = sys.version_info
        pv = "%s.%s.%s" % (vi.major, vi.minor, vi.micro)
        print(f"{iam} version: 1.4.1 (python {pv})")
        return

    if len(args) == 0:
        print("%s - no arguments specified" % iam)
        print("")
        print("Try something like:  compare_common_properties  frameworkSup/projects/widgets/*/*.h")
        print("")
        return

    print("")

    for group in groups:
        process_group(group, args)

    print(f"{iam} complete")

if __name__ == "__main__":
    main()

# end
