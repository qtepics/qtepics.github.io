#!/usr/bin/env python

""" Converts a dbd file, or a number of concatinated dbd files
    into a record field list suitable for use by the EPICS Qt
    framework's QEPvProperties widget.

    Note: requires python 3.6 or later.
"""

import os
import os.path
import sys
import enum
import collections

Process_State = enum.Enum("Process_State", ("Ready", "RecordType", "Field"))


# -----------------------------------------------------------------------------
#
def report(msg):
    sys.stderr.write(msg + "\n")


# -----------------------------------------------------------------------------
#
def find_between(s, first, last):
    try:
        start = s.index(first) + len(first)
        end = s.index(last, start)
        return s[start:end]
    except BaseException:
        report(f"s:     '{s}'")
        report(f"first: '{first}'")
        report(f"last:  '{last}'")
        raise


# -----------------------------------------------------------------------------
#
def update_rfl(rfl, dbd_file):
    report(f"processing: {dbd_file}")

    try:
        source_file = open(dbd_file, "r")
    except BaseException:
        report("cannot open: %s" % dbd_file)
        return False

    lines = source_file.read().splitlines()
    source_file.close()

    # We use a state machine top process each line.
    # There is minimal error checking as input is a generated
    # and well formatted file.
    #
    state = Process_State.Ready
    record_type_spec = None
    field_spec = None

    for line in lines:
        line = line.strip()

        if len(line) == 0 or line[0] == '#':
            continue

        if state == Process_State.Ready:
            if line.startswith("recordtype"):
                record_type_name = find_between(line, "(", ")").strip()

                record_type_spec = collections.OrderedDict()

                # Add pseudo RTYP field
                record_type_spec["RTYP"] = {"type": "DBF_STRING",
                                            "comment": "Record Type",
                                            "size": 20}

                if record_type_name not in rfl:
                    report(f"adding {record_type_name} specification")
                    rfl[record_type_name] = record_type_spec
                else:
                    report(f"duplicate specification of {record_type_name} ignored")

                state = Process_State.RecordType

        elif state == Process_State.RecordType:
            if line.startswith("field"):
                field_name = find_between(line, "(", ",").strip()
                field_type = find_between(line, ",", ")").strip()

                field_spec = {"type": field_type, "comment": "", "size": 0}
                record_type_spec[field_name] = field_spec

                state = Process_State.Field

            elif line == "}":
                state = Process_State.Ready
                record_type_spec = None

        elif state == Process_State.Field:
            if line.startswith("promptgroup"):
                pass

            elif line.startswith("prompt"):
                comment = find_between(line, '("', '")').strip()
                field_spec["comment"] = comment

            elif line.startswith("size"):
                size = find_between(line, "(", ")").strip()
                field_spec["size"] = int(size)

            elif line == "}":
                state = Process_State.RecordType
                field_spec = None

        else:
            assert False, ""

    return True


# -----------------------------------------------------------------------------
#
def output_field(record_type_name, field_name, field_spec, target):
    """
    """

    if field_spec["type"] == "DBF_NOACCESS":
        return

    # do NAME special and sscan special
    #
    if field_spec["type"] in ("DBF_INLINK", "DBF_OUTLINK", "DBF_FWDLINK") or field_name == "NAME":
        field_name = field_name + '*'

    elif field_spec["type"] == "DBF_STRING" and field_spec["size"] > 41:
        field_name = field_name + '$'

    # Do a special for the sscan record
    elif record_type_name == "sscan" and field_spec["type"] == "DBF_STRING" and field_name[-2:] == "PV":
        field_name = field_name + '*'

    gap = " " * (5 - len(field_name))
    comment = field_spec["comment"]
    target.write(f'{field_name}, {gap}"{comment}"\n')


# -----------------------------------------------------------------------------
#
def output(rfl, target):

    target.write("# record field list info\n")
    target.write("#\n")
    target.write("# field names ending in $ are read as long string (if supported by the IOC)\n")
    target.write("# field names ending in * are also read as long string and support PV properties.\n")
    target.write("#\n")
    target.write("\n")

    for record_type_name in sorted(rfl.keys()):
        target.write("#-------------------------------------------------------------------------------\n")
        target.write("#\n")
        target.write(f"<<{record_type_name}>>\n")
        record_type_spec = rfl[record_type_name]

        # Field names are processed in order added to the dict - we are 3.9.2 or later
        #
        alarm_special = True
        for field_name, field_spec in record_type_spec.items():

            # However we do alarm levels is more friendly order.
            #
            if field_name in ("HIHI", "HIGH", "LOW", "LOLO"):
                if alarm_special:
                    for field_name in ("HIHI", "HIGH", "LOW", "LOLO"):
                        field_spec = record_type_spec.get(field_name, None)
                        if field_spec is not None:
                            output_field(record_type_name, field_name, field_spec, target)
                    alarm_special = False

            else:
                output_field(record_type_name, field_name, field_spec, target)

        target.write("\n")
    target.write("# end\n")


# -----------------------------------------------------------------------------
#
def run():
    # TODO: Check for -h/--help
    args = sys.argv
    args.pop(0)   # remove exectuable name

    number = len(args)
    if number == 0:
        print(f"dbd2rfl: missing arguments", file=sys.stderr)
        os._exit(1)

    if number >= 1 and args[0] in ("-h", "--help"):
        print(f"""\
The dbd2rfl script generates a record field list based on the given
dbd files. The record field list is directed to standard out. It is
in a format suitable for the QEPvProperties widget.

usage: dbd2rfl DBD_FILES...
       dbd2rfl -h,--help
""")
        return

    rfl = {}
    for dbd_file in args:
        status = update_rfl(rfl, dbd_file)
        state = "okay" if status else "fail"
        report(f"{dbd_file} status: {state}")

    output(rfl, sys.stdout)


if __name__ == "__main__":
    run()

# end
